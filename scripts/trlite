#!/bin/bash

# Copyright (c) 2016-2018, Intel Corporation.
# Author: Geoff Gustafson <geoff@linux.intel.com>

# trlite - a local version of the tests we run in Travis
#   trlite [-l] [-j] [-nN] [-v] [vmname] [startnum] [endnum]
#
#   (for now, options must appear in specified order)
#   -l runs tests in ZJS_BASE instead of a clean git clone
#   -j runs all tests, with parallel execution (4 threads currently)
#   -nN appends N to .trlite directory name
#   -v turns on verbose output
#   by default, runs all tests
#   trlite 1 or trlite zephyr runs just VM #1 "zephyr" tests
#   trlite 2 or trlite extra  runs just VM #2 "extra"  tests
#   trlite 3 or trlite linux  runs just VM #3 "linux"  tests
#   trlite 4 or trlite ashell runs just VM #4 "ashell" tests
#   optional startnum is the first subtest to test (default 1)
#   optional endnum is the last subtest to test (default last)

# Putting braces around the whole script like this causes it to be loaded
#   fully into memory, and thus you can edit and overwrite the script without
#   screwing up already running copies. This is primarily useful while
#   debugging the script.
{
if [ ! -d "$ZJS_BASE" ]; then
   >&2 echo "ZJS_BASE not defined. You need to source zjs-env.sh."
   exit 1
fi

if [[ -z ${TRAVIS_COMMIT_RANGE} ]]; then
    TRAVIS_COMMIT_RANGE=$(git log origin/master..HEAD --format='format:%H')
fi

RUNLOCAL=n

if [ "$1" == "-l" ]; then
    RUNLOCAL=y
    shift
else
    TRLDIR=$ZJS_BASE/.trlite
fi

TMPFILE=/tmp/zjstest.js

if [ "$1" == "-h" -o "$1" == "-?" ]; then
    echo usage: trlite [-h] [-v] [vmname] [startnum] [endnum]
    echo
    echo positional arguments:
    echo "  vmname    1-4 or zephyr/extra/linux/ashell (default: all)"
    echo "  startnum  subtest to start with (default: 1)"
    echo "  endnum    subtest to end with (default: last)"
    echo
    echo optional arguments:
    echo "  -h, -?   show this help message and exit"
    echo "  -v       turn on verbose build output"
    exit 1
fi

function display_errors()  # NAME, NUM
{
    # if clone dir still exists, something failed
    if [ -d $TRLDIR$2 ]; then
        echo Failures in $1 tests:
        echo ----------------------------------------
        tail -5 $LOGFILE.$2
        echo \(See $LOGFILE.$2 for more info.\)
        echo ----------------------------------------
        echo
    fi
}

if [[ $1 == -j* ]]; then
    if [ "$RUNLOCAL" == "y" ]; then
        echo Error: -j mode cannot be used with -l
        exit 1
    fi

    LOGFILE=/tmp/trlite-log

    echo Running all trlite tests in four parallel threads...
    for i in 1 2 3 4; do
        trlite -n$i $i 1 > $LOGFILE.$i 2>&1 &
        PIDS[$i]=$!
    done

    # wait for children to complete and wait for their filesystem changes
    wait > /dev/null
    sync

    display_errors zephyr 1
    display_errors extra  2
    display_errors linux  3
    display_errors ashell 4

    for i in 1 2 3 4; do
        if [ -d $TRLDIR$i ]; then
            exit 1
        fi
    done

    echo SUCCESS: All tests passed!
    exit 0
fi

if [[ $1 == -n* ]]; then
    if [ "$RUNLOCAL" == "y" ]; then
        echo Error: -n mode cannot be used with -l
        exit 1
    fi

    TRLDIR=$TRLDIR${1:2}
    TMPFILE=$TMPFILE${1:2}
    echo TRLDIR: $TRLDIR >> /tmp/foo
    echo TMPFILE: $TMPFILE >> /tmp/foo
    shift
fi

VERBOSE=
if [ "$1" == "-v" ]; then
    VERBOSE=V=1
    shift
fi

# flags for running tests from the different VMs
RUN=all

if   [ "$1" == "1" -o "$1" == "zephyr" ]; then RUN=1;
elif [ "$1" == "2" -o "$1" == "extra" ];  then RUN=2;
elif [ "$1" == "3" -o "$1" == "linux" ];  then RUN=3;
elif [ "$1" == "4" -o "$1" == "ashell" ]; then RUN=4; fi
shift

START=1
if [[ "$1" =~ ^[0-9]+$ ]]; then
    START=$1
    shift
fi

# default to 100 to be higher than any real subtest number
END=100
if [[ "$1" =~ ^[0-9]+$ ]]; then
    END=$1
    shift
fi

echo Building ZJS tree: "$ZJS_BASE"

if [ "$RUNLOCAL" != "y" ]; then
    rm -rf $TRLDIR

    echo Cloning git tree...
    git clone -l $ZJS_BASE $TRLDIR > /dev/null 2>&1

    # we need to refer to master later for diffs
    cp $ZJS_BASE/.git/refs/heads/master $TRLDIR/.git/refs/heads

    echo Cloning git submodules...
    cd $TRLDIR/deps
    for i in */; do
        git clone -l ../../deps/$i/.git $i > /dev/null 2>&1

        # clone submodules of submodules
        if [ -d $i/deps/ ]; then
            cd $i/deps
            for j in */; do
                git clone -l ../../../../deps/$i/deps/$j/.git $j > /dev/null 2>&1
            done
            cd ../..
        fi
    done

    echo Preserving uncommitted changes:
    cd $ZJS_BASE
    git --no-pager diff HEAD --stat
    git diff HEAD > $TRLDIR/uncommitted.patch
    cd $TRLDIR
    patch -p1 < uncommitted.patch > /dev/null

    # pause to allow consideration of diffs being applied
    if [ -z $TRAVIS ]; then
        sleep 3
    fi

    echo Updating submodules...
    make update

    source zjs-env.sh
    source deps/zephyr/zephyr-env.sh
else
    cd $ZJS_BASE
fi

echo
echo Running tests...

# requires: first arg is a <=11-char label, second arg is command
#  effects: runs zjsbanner with label, then runs the command; if it fails,
#             prints label before exiting
function try_command()
{
    TESTNUM=$((TESTNUM + 1))
    if [ "$TESTNUM" -lt "$START" -o "$TESTNUM" -gt "$END" ]; then
        echo "Skipping test #$TESTNUM"
        return
    fi

    LABEL=$1
    shift
    zjsbanner "$LABEL"

    # run the command
    $*
    CODE=$?
    if [ $CODE -ne 0 ]; then
        echo Error: Failed in $LABEL subtest \#$TESTNUM with code $CODE \(rerun with: trlite $VMNUM $TESTNUM\)!
        exit $CODE
    fi
    echo Success: $LABEL
}

# requires: first arg is a <=11-char label, second arg is command
#  effects: runs zjsbanner with label, then runs the test and greps for FAIL;
#             if found, prints label before exiting
function try_test()
{
    TESTNUM=$((TESTNUM + 1))
    if [ "$TESTNUM" -lt "$START" -o "$TESTNUM" -gt "$END" ]; then
        echo "Skipping test #$TESTNUM"
        return
    fi

    LABEL=$1
    shift
    zjsbanner "$LABEL"

    # run the command
    $* | tee /tmp/trlite_output
    if grep -q FAIL /tmp/trlite_output; then
        echo Error: Failed in $LABEL subtest \#$TESTNUM with code $CODE \(rerun with: trlite $VMNUM $TESTNUM\)!
        rm -f /tmp/trlite_output
        exit 1
    fi
    if ! grep -q TOTAL /tmp/trlite_output; then
        echo
        echo "******************************************************************************"
        echo Error: Test incomplete in $LABEL subtest \#$TESTNUM with code $CODE \(rerun with: trlite $VMNUM $TESTNUM\)!
        echo "******************************************************************************"
        exit 1
    else
        echo Success: $LABEL
    fi
    rm -f /tmp/trlite_output
}

# requires: first arg is tmpfile name, second arg is modules array, third arg
#             is sensors array
#  effects: writes test to given tmpfile that uses all the given modules and
#             sensors, as well as basic common modules
function write_modules_test()
{
    TMPFILE=$1
    MODULES=$2
    SENSORS=$3

    MODNUM=0
    rm $TMPFILE
    for index in "${!MODULES[@]}"; do
        MODNUM=$((MODNUM + 1))
        MODULE=${MODULES[index]}
        echo "var module$MODNUM = require('$MODULE');" >> $TMPFILE
    done

    # add sensor modules
    SENSORNUM=0
    for index in "${!SENSORS[@]}"; do
        SENSORNUM=$((SENSORNUM + 1))
        MODULE=${SENSORS[index]}
        echo "var sensor$SENSORNUM = $MODULE({});" >> $TMPFILE
    done

    # add use of built-in modules
    echo "var buf = new Buffer(10);" >> $TMPFILE
    echo "setTimeout(function() {}, 10);" >> $TMPFILE
}

#
# Tests from VM #1
#

if [ "$RUN" == "all" -o "$RUN" == "1" ]; then
    VMNUM=1
    TESTNUM=0

    # A101 build tests spanning all modules
    try_command "hello world" make $VERBOSE

    MODULES=(ble events gpio grove_lcd i2c performance pwm)
    SENSORS=(Accelerometer Gyroscope Magnetometer TemperatureSensor)
    write_modules_test $TMPFILE $MODULES $SENSORS
    try_command "modules" make $VERBOSE JS=$TMPFILE ROM=255

    MODULES=(pme)
    write_modules_test $TMPFILE $MODULES
    try_command "net" make $VERBOSE JS=$TMPFILE ROM=255

    # OCF test
#    echo "var ocf = require('ocf');" > $TMPFILE
#    echo "var client = ocf.client;" >> $TMPFILE
#    echo "var server = ocf.server;" >> $TMPFILE
#    try_command "ocf" make $VERBOSE JS=$TMPFILE ROM=256
fi

#
# Tests from VM #2
#

if [ "$RUN" == "all" -o "$RUN" == "2" ]; then
    VMNUM=2
    TESTNUM=0

    # k64f build tests
    try_command "k64f hello" make $VERBOSE BOARD=frdm_k64f

    MODULES=(board buffer events grove_lcd i2c performance pwm)
    SENSORS=(Accelerometer)
    write_modules_test $TMPFILE $MODULES $SENSORS
    try_command "k64f module" make $VERBOSE JS=$TMPFILE ROM=256 BOARD=frdm_k64f

#    MODULES=(net ws)
#    write_modules_test $TMPFILE $MODULES $SENSORS
#    try_command "k64f net" make $VERBOSE JS=$TMPFILE ROM=256 BOARD=frdm_k64f

    # debugger test
#    MODULES=(buffer)
#    write_modules_test $TMPFILE $MODULE
#    try_command "k64f debugger" make $VERBOSE JS=$TMPFILE ROM=256 BOARD=frdm_k64f DEBUGGER=on

    # OCF test
#    echo "var ocf = require('ocf');" > $TMPFILE
#    echo "var client = ocf.client;" >> $TMPFILE
#    echo "var server = ocf.server;" >> $TMPFILE
#    try_command "k64f ocf" make $VERBOSE JS=$TMPFILE ROM=256 BOARD=frdm_k64f
fi

#
# Tests from VM #3
#

function check_jstring_util() {
    CALLCOUNT=$(grep "jerry_string_to\(_utf8\)\?_char_buffer" src/zjs_util.c | wc -l)

    # make sure there are exactly two calls to the function
    # note: the return value of running wc -l on Mac will have some blank space
    # in front of it, thus no double quoting $CALLCOUNT as the comparison will fail
    if [ $CALLCOUNT != "2" ]; then
        echo "Error: Expected two calls to jerry_string_to[_utf8]_char_buffer in zjs_util.c!"
        echo "Use zjs_copy_jstring and zjs_alloc_from_jstring instead."
        return 1;
    fi
}

function check_jstring_others() {
    SRCFILES=$(find src -name "*.[ch]" | grep -v zjs_util.c)

    # make sure there are no other calls to the function
    if grep "jerry_string_to\(_utf8\)\?_char_buffer" $SRCFILES; then
        echo
        echo "Error: Found calls to jerry_string_to[_utf8]_char_buffer outside zjs_util.c!"
        echo "Use zjs_copy_jstring and zjs_alloc_from_jstring instead."
        return 1;
    fi
}

function check_copyright() {
    SRCFILES=$(find arc modules samples src tests | grep -v outdir | grep "\.js$\|\.[ch]$" | sort)

    YEAR=$(date +%G)
    RVAL=0

    if [ -z $TRAVIS_COMMIT_RANGE ]; then
        NAMES=$(git diff --name-only master)
    else
        # work around issue https://github.com/travis-ci/travis-ci/issues/4596
        NAMES=$(git diff --name-only $TRAVIS_COMMIT_RANGE)
    fi

    # find intersection of NAMES and SRCFILES (requires sorted lists)
    MATCHES=$(comm -12 <(echo $NAMES | tr ' ' '\n' | sort) <(echo $SRCFILES | tr ' ' '\n'))

    # assist Intel contributors by reminding them to update copyrights
    if [ -z $TRAVIS_COMMIT ]; then
        EMAIL=$(git config user.email)
    else
        EMAIL=$(git show --format="%aE" -s $TRAVIS_COMMIT)
    fi
    if echo $EMAIL | grep -q "[@.]intel.com"; then
        INTEL=y
    else
        INTEL=
    fi

    for f in $MATCHES; do
        # check for Copyright comment
        if ! $(head -1 $f | grep -q Copyright); then
            echo Error: Add copyright to first line of $f!
            RVAL=1
        # if found, make sure current date is there
        elif ! $(head -1 $f | grep -q $YEAR); then
            if [ "$INTEL" ]; then
                if head -1 $f | grep -q Intel; then
                    echo Warning: Add $YEAR to copyright in $f!
                fi
            fi
        fi
    done

    return $RVAL
}

function check_signed_off_by() {
    for i in $TRAVIS_COMMIT_RANGE; do
        if [ "1" != "$(grep -c '^Signed-off-by: ' <<< "$(git log --format=%B -n 1 $i)")" ]; then
            echo "Commit ID $i does not have Signed-off-by line"
            return 1
        fi
    done

    return 0
}

if [ "$RUN" == "all" -o "$RUN" == "3" ]; then
    VMNUM=3
    TESTNUM=0

    # git check
    try_command "git check" git --no-pager diff --check $(git rev-list HEAD | tail -1)

    # ensure only two uses of jerry_string_to[_utf8]_char_buffer in zjs_util.c
    try_command "jstring1" check_jstring_util

    # ensure no other source file uses jerry_string_to[_utf8]_char_buffer
    try_command "jstring2" check_jstring_others

    # check that updated files have updated copyrights
    try_command "copyright" check_copyright

    # check that headers include all needed dependencies
#    try_command "headers" checkheaders -v

    # check that new commits have signed-off-by
    try_command "signed-off" check_signed_off_by

    # linux build tests
    try_command "linux" make $VERBOSE BOARD=linux

    # linux debugger tests
    try_command "linux debuger" make $VERBOSE BOARD=linux DEBUGGER=on

    # linux unit tests
    try_command "unit tests" ./outdir/linux/release/jslinux --unittest

    # linux runtime tests
    for i in buffer buffer-rw callbacks eval event error gpio promise timers; do
        try_test "t-$i" ./outdir/linux/release/jslinux tests/test-$i.js
    done
fi

#
# Tests from VM #4
#

if [ "$RUN" == "all" -o "$RUN" == "4" ]; then
    VMNUM=4
    TESTNUM=0

    # ashell tests
#    try_command "ashell" make $VERBOSE ashell ROM=255

    # build ide version
#    try_command "ide" make $VERBOSE ide ROM=255

    # test key sample code
#    try_command "btgrove" make $VERBOSE JS=samples/WebBluetoothGroveLcdDemo.js ROM=256

    # test snapshot off
    try_command "snapoff" make $VERBOSE SNAPSHOT=off

    # test debug build
    try_command "debug" make $VERBOSE VARIANT=debug

    # test RAM size change
    try_command "ram" make $VERBOSE RAM=70
fi

# clean up on success
if [ "$RUNLOCAL" != "y" ]; then
    cd $ZJS_BASE
    rm -rf $TRLDIR
fi
exit 0
}
